{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: \"SingleBug\",\n  props: {\n    project_id: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      bugs: [] // Array to store all bugs\n    };\n  },\n  mounted() {\n    // Log the project_id to verify it's being passed correctly\n    console.log('Received Project ID in SingleBug:', this.project_id);\n\n    // Fetch data from the API using the project_id as bug_project_id\n    this.fetchBugData();\n  },\n  methods: {\n    async fetchBugData() {\n      try {\n        const response = await axios.get('http://localhost:8000/Bugs/searchbugbyproject/', {\n          params: {\n            bug_project_id: this.project_id\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Update the bugs array with the response data\n        this.bugs = response.data;\n      } catch (error) {\n        console.error('Error fetching bug data:', error);\n      }\n    },\n    performAction() {\n      // Implement the action functionality here\n      console.log('Performing action');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","project_id","type","String","required","data","bugs","mounted","console","log","fetchBugData","methods","response","get","params","bug_project_id","error","performAction"],"sources":["/home/ali/BugTrackerProject/Frontend/bugtrackingfrontend/src/components/SingleBug.vue"],"sourcesContent":["<template>\n  <div class=\"bug-details\">\n    <div v-if=\"bugs.length\">\n      <div v-for=\"(bug, index) in bugs\" :key=\"index\" class=\"detail-item\">\n        <div class=\"label-container\">\n          <div class=\"empty-box\"></div>\n          <strong>Details:</strong>\n        </div>\n        <div class=\"details-content\">\n          <p>{{ bug.bug_description || 'No details available' }}</p>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Status:</strong>\n          <div class=\"details-content\">\n            <p>{{ bug.bug_status || 'No status available' }}</p>\n          </div>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Due Date:</strong>\n          <div class=\"details-content\">\n            <p>{{ bug.due_date || 'No due date available' }}</p>\n          </div>\n        </div>\n        <div class=\"detail-item\">\n          <strong>Assigned To:</strong>\n          <div class=\"details-content\">\n            <p>{{ bug.assigned_to || 'No assignee available' }}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div v-if=\"!bugs.length\" class=\"no-bugs-message\">\n      No bugs available for this project.\n    </div>\n    <div class=\"detail-item\">\n      <strong>Action:</strong>\n      <div class=\"details-content\">\n        <button @click=\"performAction\">Perform Action</button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: \"SingleBug\",\n  props: {\n    project_id: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      bugs: [] // Array to store all bugs\n    };\n  },\n  mounted() {\n    // Log the project_id to verify it's being passed correctly\n    console.log('Received Project ID in SingleBug:', this.project_id);\n\n    // Fetch data from the API using the project_id as bug_project_id\n    this.fetchBugData();\n  },\n  methods: {\n    async fetchBugData() {\n      try {\n        const response = await axios.get('http://localhost:8000/Bugs/searchbugbyproject/', {\n          params: {\n            bug_project_id: this.project_id\n          }\n        });\n        console.log('API Response:', response.data);\n\n        // Update the bugs array with the response data\n        this.bugs = response.data;\n      } catch (error) {\n        console.error('Error fetching bug data:', error);\n      }\n    },\n    performAction() {\n      // Implement the action functionality here\n      console.log('Performing action');\n    }\n  }\n}\n</script>\n\n<style scoped>\n.bug-details {\n  font-family: Arial, sans-serif;\n  display: flex;\n  flex-direction: column; /* Stack items vertically */\n  gap: 20px; /* Space between items */\n  padding: 20px; /* Add padding around the content */\n}\n\n.detail-item {\n  display: flex;\n  flex-direction: column; /* Stack label and content vertically */\n  min-width: 200px; /* Minimum width for each item */\n  box-sizing: border-box; /* Include padding and border in width and height */\n}\n\n.label-container {\n  display: flex;\n  align-items: center;\n}\n\n.empty-box {\n  width: 20px;\n  height: 20px;\n  background-color: transparent;\n  border: 1px solid #ddd;\n  margin-right: 10px;\n}\n\n.details-content {\n  margin-top: 5px;\n}\n\n.detail-item strong {\n  display: inline-block;\n  width: 120px;\n  font-weight: bold;\n}\n\n.no-bugs-message {\n  font-style: italic;\n  color: #888;\n}\n</style>\n"],"mappings":"AA4CA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE;IACLC,UAAU,EAAE;MACVC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,EAAC,CAAE;IACX,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACAC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAE,IAAI,CAACR,UAAU,CAAC;;IAEjE;IACA,IAAI,CAACS,YAAY,CAAC,CAAC;EACrB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,gDAAgD,EAAE;UACjFC,MAAM,EAAE;YACNC,cAAc,EAAE,IAAI,CAACd;UACvB;QACF,CAAC,CAAC;QACFO,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAACP,IAAI,CAAC;;QAE3C;QACA,IAAI,CAACC,IAAG,GAAIM,QAAQ,CAACP,IAAI;MAC3B,EAAE,OAAOW,KAAK,EAAE;QACdR,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd;MACAT,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAClC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}