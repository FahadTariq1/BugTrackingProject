{"ast":null,"code":"import FileUpload from 'primevue/fileupload';\nimport Button from 'primevue/button';\nimport { fetchDevelopers, createBug } from '../servicesfile/service';\nexport default {\n  name: 'PopUpNewTask',\n  props: {\n    isVisible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    FileUpload,\n    Button\n  },\n  data() {\n    return {\n      developers: [],\n      selectedDeveloper: null,\n      dueDate: '',\n      title: '',\n      bugDetails: '',\n      file: null,\n      bug_screenshot_type: '',\n      bug_project: '',\n      bug_user_id: '',\n      bug_type: 'inprogress',\n      bug_date: ''\n    };\n  },\n  methods: {\n    closeModal() {\n      this.$emit('update:isVisible', false);\n    },\n    async fetchDevelopers() {\n      try {\n        this.developers = await fetchDevelopers();\n        console.log(this.developers);\n      } catch (error) {\n        console.error('Error fetching developers:', error);\n      }\n    },\n    onDeveloperChange() {\n      console.log('Selected developer ID:', this.selectedDeveloper);\n    },\n    onSelect(event) {\n      this.file = event.files[0];\n      const mimeType = this.file.type;\n      this.bug_screenshot_type = mimeType.split('/')[1];\n      console.log('File selected:', this.file.name);\n      console.log('File type:', this.bug_screenshot_type);\n    },\n    remove() {\n      this.file = null;\n      this.$refs.fileupload.clear();\n      console.log(\"File removed\");\n    },\n    async submitForm() {\n      try {\n        const formData = new FormData();\n        formData.append('bug_title', this.title);\n        formData.append('bug_description', this.bugDetails);\n        formData.append('bug_screenshot_type', this.bug_screenshot_type);\n        formData.append('bug_type', this.bug_type);\n        formData.append('bug_project', this.bug_project);\n        formData.append('bug_user', this.selectedDeveloper);\n        formData.append('bug_date', this.dueDate);\n        if (this.file) {\n          formData.append('bug_image', this.file);\n        }\n        console.log('Form data to be sent:', Array.from(formData.entries()));\n        await createBug(formData);\n        console.log('Form submitted successfully');\n        this.$emit('form-submitted'); // Emit event on successful form submission\n        this.closeModal();\n      } catch (error) {\n        console.error('Error submitting form:', error);\n      }\n    }\n  },\n  watch: {\n    isVisible(newVal) {\n      if (newVal) {\n        this.fetchDevelopers();\n      }\n    }\n  },\n  created() {\n    let bugProjectIdInt = this.$route.params.project_id;\n    this.bug_project = parseInt(bugProjectIdInt, 10);\n    console.log('Project ID from URL:', this.bug_project);\n  }\n};","map":{"version":3,"names":["FileUpload","Button","fetchDevelopers","createBug","name","props","isVisible","type","Boolean","required","components","data","developers","selectedDeveloper","dueDate","title","bugDetails","file","bug_screenshot_type","bug_project","bug_user_id","bug_type","bug_date","methods","closeModal","$emit","console","log","error","onDeveloperChange","onSelect","event","files","mimeType","split","remove","$refs","fileupload","clear","submitForm","formData","FormData","append","Array","from","entries","watch","newVal","created","bugProjectIdInt","$route","params","project_id","parseInt"],"sources":["/home/ali/BugTrackerProject/Frontend/bugtrackingfrontend/src/components/ModalNewBug.vue"],"sourcesContent":["<template>\n  <div class=\"modal\" v-if=\"isVisible\" @click.self=\"closeModal\">\n    <div class=\"modal-content\">\n      <span class=\"close\" @click=\"closeModal\">&times;</span>\n      <div class=\"topheadergray\">\n        <div class=\"header-content\">\n          <h2>Add new bug</h2>\n          <i class=\"fas fa-ellipsis-h\"></i>\n        </div>\n      </div>\n      <hr>\n      <div class=\"form-container\">\n        <div class=\"assign-container\">\n          <p class=\"assign-text\">Assign to</p>\n          <div class=\"dropdown\">\n            <select v-model=\"selectedDeveloper\" @change=\"onDeveloperChange\">\n              <option value=\"\" disabled>Select Developer</option>\n              <option v-for=\"developer in developers\" :key=\"developer.id\" :value=\"developer.id\">\n                {{ developer.user_name }}\n              </option>\n            </select>\n          </div>\n        </div>\n        <div class=\"due-date-container\">\n          <p class=\"due-date-text\">Add Due Date</p>\n          <input type=\"date\" v-model=\"dueDate\" />\n        </div>\n        <div class=\"title-container\">\n          <input type=\"text\" v-model=\"title\" placeholder=\"Add title here\" />\n        </div>\n        <div class=\"bug-details-container\">\n          <h4>Bug Details</h4>\n          <input type=\"text\" v-model=\"bugDetails\" placeholder=\"Enter details here\" />\n        </div>\n        <div class=\"file-upload-container\">\n          <FileUpload ref=\"fileupload\" mode=\"basic\" name=\"file\" url=\"/api/upload\" accept=\"image/png, image/gif\" :maxFileSize=\"1000000\" @select=\"onSelect\" />\n          <div class=\"file-upload-container2\">\n            <Button label=\"Remove\" @click=\"remove\" severity=\"secondary\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"submit-container\">\n        <Button label=\"Submit\" @click=\"submitForm\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport FileUpload from 'primevue/fileupload';\nimport Button from 'primevue/button';\nimport { fetchDevelopers, createBug } from '../servicesfile/service'; \nexport default {\n  name: 'PopUpNewTask',\n  props: {\n    isVisible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    FileUpload,\n    Button\n  },\n  data() {\n    return {\n      developers: [],\n      selectedDeveloper: null,\n      dueDate: '',\n      title: '',\n      bugDetails: '',\n      file: null,\n      bug_screenshot_type: '',\n      bug_project: '',\n      bug_user_id: '',\n      bug_type: 'inprogress',\n      bug_date: ''\n    };\n  },\n  methods: {\n    closeModal() {\n      this.$emit('update:isVisible', false);\n    },\n    async fetchDevelopers() {\n      try {\n        this.developers = await fetchDevelopers();\n        console.log(this.developers);\n      } catch (error) {\n        console.error('Error fetching developers:', error);\n      }\n    },\n    onDeveloperChange() {\n      console.log('Selected developer ID:', this.selectedDeveloper);\n    },\n    onSelect(event) {\n      this.file = event.files[0];\n      const mimeType = this.file.type;\n      this.bug_screenshot_type = mimeType.split('/')[1];\n      console.log('File selected:', this.file.name);\n      console.log('File type:', this.bug_screenshot_type);\n    },\n    remove() {\n      this.file = null;\n      this.$refs.fileupload.clear();\n      console.log(\"File removed\");\n    },\n    async submitForm() {\n      try {\n        const formData = new FormData();\n        formData.append('bug_title', this.title);\n        formData.append('bug_description', this.bugDetails);\n        formData.append('bug_screenshot_type', this.bug_screenshot_type);\n        formData.append('bug_type', this.bug_type);\n        formData.append('bug_project', this.bug_project);\n        formData.append('bug_user', this.selectedDeveloper);\n        formData.append('bug_date', this.dueDate);\n\n        if (this.file) {\n          formData.append('bug_image', this.file);\n        }\n\n        console.log('Form data to be sent:', Array.from(formData.entries()));\n        await createBug(formData);\n        console.log('Form submitted successfully');\n\n        this.$emit('form-submitted'); // Emit event on successful form submission\n        this.closeModal();\n      } catch (error) {\n        console.error('Error submitting form:', error);\n      }\n    }\n  },\n  watch: {\n    isVisible(newVal) {\n      if (newVal) {\n        this.fetchDevelopers();\n      }\n    }\n  },\n  created() {\n    let bugProjectIdInt = this.$route.params.project_id;\n    this.bug_project = parseInt(bugProjectIdInt, 10);\n    console.log('Project ID from URL:', this.bug_project);\n  }\n};\n</script>\n\n\n  \n  <style scoped>\n  .submit-container {\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n  }\n  .file-upload-container2 {\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n  }\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .modal-content {\n    background-color: white;\n    padding: 20px;\n    border-radius: 5px;\n    width: 50%;\n    max-width: 600px;\n    position: relative;\n  }\n  \n  .close {\n    border: 2px solid black;\n    background-color: black;\n    color: white;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 30px;\n    cursor: pointer;\n  }\n  \n  .topheadergray {\n    margin-top: 20px;\n    border-radius: 5px 5px 0 0;\n    margin-bottom: 10px;\n    position: relative;\n  }\n  \n  .header-content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n  \n  .header-content i {\n    font-size: 20px;\n    color: gray;\n  }\n  \n  hr {\n    border: 0;\n    height: 1px;\n    background: gray;\n    width: 100%;\n  }\n  \n  .form-container {\n    margin-top: 10px;\n  }\n  \n  .assign-container {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  \n  .assign-text {\n    margin-right: 10px;\n  }\n  \n  .dropdown select {\n    padding: 5px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 14px;\n    width: 150px;\n  }\n  \n  .due-date-container {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  \n  .due-date-text {\n    margin-right: 10px;\n  }\n  \n  input[type=\"date\"] {\n    padding: 5px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 14px;\n  }\n  \n  .title-container {\n    display: flex;\n    align-items: center;\n  }\n  \n  input[type=\"text\"] {\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 16px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n  \n  .bug-details-container {\n    margin-top: 20px;\n  }\n  \n  .bug-details-container h4 {\n    margin-bottom: 10px;\n    font-size: 18px;\n  }\n  \n  .bug-details-container input[type=\"text\"] {\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 16px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n  .file-upload-container{\n    margin-top: 20px;\n  }\n  </style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}