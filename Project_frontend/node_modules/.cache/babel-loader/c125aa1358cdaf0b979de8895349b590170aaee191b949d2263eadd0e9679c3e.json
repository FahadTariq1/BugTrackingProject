{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getSelection, clearSelection } from '@primeuix/utils/dom';\nimport { isNotEmpty, isEmpty } from '@primeuix/utils/object';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputNumberStyle from 'primevue/inputnumber/style';\nimport { resolveComponent, openBlock, createElementBlock, mergeProps, createVNode, normalizeClass, normalizeStyle, renderSlot, createElementVNode, toHandlers, createBlock, resolveDynamicComponent, createCommentVNode } from 'vue';\nvar script$1 = {\n  name: 'BaseInputNumber',\n  \"extends\": BaseComponent,\n  props: {\n    modelValue: {\n      type: Number,\n      \"default\": null\n    },\n    format: {\n      type: Boolean,\n      \"default\": true\n    },\n    showButtons: {\n      type: Boolean,\n      \"default\": false\n    },\n    buttonLayout: {\n      type: String,\n      \"default\": 'stacked'\n    },\n    incrementButtonClass: {\n      type: String,\n      \"default\": null\n    },\n    decrementButtonClass: {\n      type: String,\n      \"default\": null\n    },\n    incrementButtonIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    incrementIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    decrementButtonIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    decrementIcon: {\n      type: String,\n      \"default\": undefined\n    },\n    locale: {\n      type: String,\n      \"default\": undefined\n    },\n    localeMatcher: {\n      type: String,\n      \"default\": undefined\n    },\n    mode: {\n      type: String,\n      \"default\": 'decimal'\n    },\n    prefix: {\n      type: String,\n      \"default\": null\n    },\n    suffix: {\n      type: String,\n      \"default\": null\n    },\n    currency: {\n      type: String,\n      \"default\": undefined\n    },\n    currencyDisplay: {\n      type: String,\n      \"default\": undefined\n    },\n    useGrouping: {\n      type: Boolean,\n      \"default\": true\n    },\n    minFractionDigits: {\n      type: Number,\n      \"default\": undefined\n    },\n    maxFractionDigits: {\n      type: Number,\n      \"default\": undefined\n    },\n    roundingMode: {\n      type: String,\n      \"default\": 'halfExpand',\n      validator: function validator(value) {\n        return ['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven'].includes(value);\n      }\n    },\n    min: {\n      type: Number,\n      \"default\": null\n    },\n    max: {\n      type: Number,\n      \"default\": null\n    },\n    step: {\n      type: Number,\n      \"default\": 1\n    },\n    allowEmpty: {\n      type: Boolean,\n      \"default\": true\n    },\n    highlightOnFocus: {\n      type: Boolean,\n      \"default\": false\n    },\n    readonly: {\n      type: Boolean,\n      \"default\": false\n    },\n    variant: {\n      type: String,\n      \"default\": null\n    },\n    invalid: {\n      type: Boolean,\n      \"default\": false\n    },\n    disabled: {\n      type: Boolean,\n      \"default\": false\n    },\n    placeholder: {\n      type: String,\n      \"default\": null\n    },\n    fluid: {\n      type: Boolean,\n      \"default\": null\n    },\n    inputId: {\n      type: String,\n      \"default\": null\n    },\n    inputClass: {\n      type: [String, Object],\n      \"default\": null\n    },\n    inputStyle: {\n      type: Object,\n      \"default\": null\n    },\n    ariaLabelledby: {\n      type: String,\n      \"default\": null\n    },\n    ariaLabel: {\n      type: String,\n      \"default\": null\n    }\n  },\n  style: InputNumberStyle,\n  provide: function provide() {\n    return {\n      $pcInputNumber: this,\n      $parentInstance: this\n    };\n  }\n};\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nvar script = {\n  name: 'InputNumber',\n  \"extends\": script$1,\n  inheritAttrs: false,\n  emits: ['update:modelValue', 'input', 'focus', 'blur'],\n  inject: {\n    $pcFluid: {\n      \"default\": null\n    }\n  },\n  numberFormat: null,\n  _numeral: null,\n  _decimal: null,\n  _group: null,\n  _minusSign: null,\n  _currency: null,\n  _suffix: null,\n  _prefix: null,\n  _index: null,\n  groupChar: '',\n  isSpecialChar: null,\n  prefixChar: null,\n  suffixChar: null,\n  timer: null,\n  data: function data() {\n    return {\n      d_modelValue: this.modelValue,\n      focused: false\n    };\n  },\n  watch: {\n    modelValue: function modelValue(newValue) {\n      this.d_modelValue = newValue;\n    },\n    locale: function locale(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    localeMatcher: function localeMatcher(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    mode: function mode(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    currency: function currency(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    currencyDisplay: function currencyDisplay(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    useGrouping: function useGrouping(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    minFractionDigits: function minFractionDigits(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    maxFractionDigits: function maxFractionDigits(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    suffix: function suffix(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    },\n    prefix: function prefix(newValue, oldValue) {\n      this.updateConstructParser(newValue, oldValue);\n    }\n  },\n  created: function created() {\n    this.constructParser();\n  },\n  methods: {\n    getOptions: function getOptions() {\n      return {\n        localeMatcher: this.localeMatcher,\n        style: this.mode,\n        currency: this.currency,\n        currencyDisplay: this.currencyDisplay,\n        useGrouping: this.useGrouping,\n        minimumFractionDigits: this.minFractionDigits,\n        maximumFractionDigits: this.maxFractionDigits,\n        roundingMode: this.roundingMode\n      };\n    },\n    constructParser: function constructParser() {\n      this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n      var numerals = _toConsumableArray(new Intl.NumberFormat(this.locale, {\n        useGrouping: false\n      }).format(9876543210)).reverse();\n      var index = new Map(numerals.map(function (d, i) {\n        return [d, i];\n      }));\n      this._numeral = new RegExp(\"[\".concat(numerals.join(''), \"]\"), 'g');\n      this._group = this.getGroupingExpression();\n      this._minusSign = this.getMinusSignExpression();\n      this._currency = this.getCurrencyExpression();\n      this._decimal = this.getDecimalExpression();\n      this._suffix = this.getSuffixExpression();\n      this._prefix = this.getPrefixExpression();\n      this._index = function (d) {\n        return index.get(d);\n      };\n    },\n    updateConstructParser: function updateConstructParser(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.constructParser();\n      }\n    },\n    escapeRegExp: function escapeRegExp(text) {\n      return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    },\n    getDecimalExpression: function getDecimalExpression() {\n      var formatter = new Intl.NumberFormat(this.locale, _objectSpread(_objectSpread({}, this.getOptions()), {}, {\n        useGrouping: false\n      }));\n      return new RegExp(\"[\".concat(formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, ''), \"]\"), 'g');\n    },\n    getGroupingExpression: function getGroupingExpression() {\n      var formatter = new Intl.NumberFormat(this.locale, {\n        useGrouping: true\n      });\n      this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n      return new RegExp(\"[\".concat(this.groupChar, \"]\"), 'g');\n    },\n    getMinusSignExpression: function getMinusSignExpression() {\n      var formatter = new Intl.NumberFormat(this.locale, {\n        useGrouping: false\n      });\n      return new RegExp(\"[\".concat(formatter.format(-1).trim().replace(this._numeral, ''), \"]\"), 'g');\n    },\n    getCurrencyExpression: function getCurrencyExpression() {\n      if (this.currency) {\n        var formatter = new Intl.NumberFormat(this.locale, {\n          style: 'currency',\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n          roundingMode: this.roundingMode\n        });\n        return new RegExp(\"[\".concat(formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, ''), \"]\"), 'g');\n      }\n      return new RegExp(\"[]\", 'g');\n    },\n    getPrefixExpression: function getPrefixExpression() {\n      if (this.prefix) {\n        this.prefixChar = this.prefix;\n      } else {\n        var formatter = new Intl.NumberFormat(this.locale, {\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay\n        });\n        this.prefixChar = formatter.format(1).split('1')[0];\n      }\n      return new RegExp(\"\".concat(this.escapeRegExp(this.prefixChar || '')), 'g');\n    },\n    getSuffixExpression: function getSuffixExpression() {\n      if (this.suffix) {\n        this.suffixChar = this.suffix;\n      } else {\n        var formatter = new Intl.NumberFormat(this.locale, {\n          style: this.mode,\n          currency: this.currency,\n          currencyDisplay: this.currencyDisplay,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0,\n          roundingMode: this.roundingMode\n        });\n        this.suffixChar = formatter.format(1).split('1')[1];\n      }\n      return new RegExp(\"\".concat(this.escapeRegExp(this.suffixChar || '')), 'g');\n    },\n    formatValue: function formatValue(value) {\n      if (value != null) {\n        if (value === '-') {\n          // Minus sign\n          return value;\n        }\n        if (this.format) {\n          var formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n          var formattedValue = formatter.format(value);\n          if (this.prefix) {\n            formattedValue = this.prefix + formattedValue;\n          }\n          if (this.suffix) {\n            formattedValue = formattedValue + this.suffix;\n          }\n          return formattedValue;\n        }\n        return value.toString();\n      }\n      return '';\n    },\n    parseValue: function parseValue(text) {\n      var filteredText = text.replace(this._suffix, '').replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '').replace(this._group, '').replace(this._minusSign, '-').replace(this._decimal, '.').replace(this._numeral, this._index);\n      if (filteredText) {\n        if (filteredText === '-')\n          // Minus sign\n          return filteredText;\n        var parsedValue = +filteredText;\n        return isNaN(parsedValue) ? null : parsedValue;\n      }\n      return null;\n    },\n    repeat: function repeat(event, interval, dir) {\n      var _this = this;\n      if (this.readonly) {\n        return;\n      }\n      var i = interval || 500;\n      this.clearTimer();\n      this.timer = setTimeout(function () {\n        _this.repeat(event, 40, dir);\n      }, i);\n      this.spin(event, dir);\n    },\n    spin: function spin(event, dir) {\n      if (this.$refs.input) {\n        var step = this.step * dir;\n        var currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n        var newValue = this.validateValue(currentValue + step);\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    },\n    onUpButtonMouseDown: function onUpButtonMouseDown(event) {\n      if (!this.disabled) {\n        this.$refs.input.$el.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n      }\n    },\n    onUpButtonMouseUp: function onUpButtonMouseUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n    onUpButtonMouseLeave: function onUpButtonMouseLeave() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n    onUpButtonKeyUp: function onUpButtonKeyUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n    onUpButtonKeyDown: function onUpButtonKeyDown(event) {\n      if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n        this.repeat(event, null, 1);\n      }\n    },\n    onDownButtonMouseDown: function onDownButtonMouseDown(event) {\n      if (!this.disabled) {\n        this.$refs.input.$el.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n      }\n    },\n    onDownButtonMouseUp: function onDownButtonMouseUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n    onDownButtonMouseLeave: function onDownButtonMouseLeave() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n    onDownButtonKeyUp: function onDownButtonKeyUp() {\n      if (!this.disabled) {\n        this.clearTimer();\n      }\n    },\n    onDownButtonKeyDown: function onDownButtonKeyDown(event) {\n      if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n        this.repeat(event, null, -1);\n      }\n    },\n    onUserInput: function onUserInput() {\n      if (this.isSpecialChar) {\n        this.$refs.input.$el.value = this.lastValue;\n      }\n      this.isSpecialChar = false;\n    },\n    onInputKeyDown: function onInputKeyDown(event) {\n      if (this.readonly) {\n        return;\n      }\n      if (event.altKey || event.ctrlKey || event.metaKey) {\n        this.isSpecialChar = true;\n        this.lastValue = this.$refs.input.$el.value;\n        return;\n      }\n      this.lastValue = event.target.value;\n      var selectionStart = event.target.selectionStart;\n      var selectionEnd = event.target.selectionEnd;\n      var inputValue = event.target.value;\n      var newValueStr = null;\n      switch (event.code) {\n        case 'ArrowUp':\n          this.spin(event, 1);\n          event.preventDefault();\n          break;\n        case 'ArrowDown':\n          this.spin(event, -1);\n          event.preventDefault();\n          break;\n        case 'ArrowLeft':\n          if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n            event.preventDefault();\n          }\n          break;\n        case 'ArrowRight':\n          if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n            event.preventDefault();\n          }\n          break;\n        case 'Tab':\n        case 'Enter':\n        case 'NumpadEnter':\n          newValueStr = this.validateValue(this.parseValue(inputValue));\n          this.$refs.input.$el.value = this.formatValue(newValueStr);\n          this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n          this.updateModel(event, newValueStr);\n          break;\n        case 'Backspace':\n          {\n            event.preventDefault();\n            if (selectionStart === selectionEnd) {\n              var deleteChar = inputValue.charAt(selectionStart - 1);\n              var _this$getDecimalCharI = this.getDecimalCharIndexes(inputValue),\n                decimalCharIndex = _this$getDecimalCharI.decimalCharIndex,\n                decimalCharIndexWithoutPrefix = _this$getDecimalCharI.decimalCharIndexWithoutPrefix;\n              if (this.isNumeralChar(deleteChar)) {\n                var decimalLength = this.getDecimalLength(inputValue);\n                if (this._group.test(deleteChar)) {\n                  this._group.lastIndex = 0;\n                  newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                } else if (this._decimal.test(deleteChar)) {\n                  this._decimal.lastIndex = 0;\n                  if (decimalLength) {\n                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                  } else {\n                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                  }\n                } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                  var insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                } else if (decimalCharIndexWithoutPrefix === 1) {\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                  newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                }\n              }\n              this.updateValue(event, newValueStr, null, 'delete-single');\n            } else {\n              newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n              this.updateValue(event, newValueStr, null, 'delete-range');\n            }\n            break;\n          }\n        case 'Delete':\n          event.preventDefault();\n          if (selectionStart === selectionEnd) {\n            var _deleteChar = inputValue.charAt(selectionStart);\n            var _this$getDecimalCharI2 = this.getDecimalCharIndexes(inputValue),\n              _decimalCharIndex = _this$getDecimalCharI2.decimalCharIndex,\n              _decimalCharIndexWithoutPrefix = _this$getDecimalCharI2.decimalCharIndexWithoutPrefix;\n            if (this.isNumeralChar(_deleteChar)) {\n              var _decimalLength = this.getDecimalLength(inputValue);\n              if (this._group.test(_deleteChar)) {\n                this._group.lastIndex = 0;\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n              } else if (this._decimal.test(_deleteChar)) {\n                this._decimal.lastIndex = 0;\n                if (_decimalLength) {\n                  this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                } else {\n                  newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                }\n              } else if (_decimalCharIndex > 0 && selectionStart > _decimalCharIndex) {\n                var _insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < _decimalLength ? '' : '0';\n                newValueStr = inputValue.slice(0, selectionStart) + _insertedText + inputValue.slice(selectionStart + 1);\n              } else if (_decimalCharIndexWithoutPrefix === 1) {\n                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n              }\n            }\n            this.updateValue(event, newValueStr, null, 'delete-back-single');\n          } else {\n            newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, null, 'delete-range');\n          }\n          break;\n        case 'Home':\n          event.preventDefault();\n          if (isNotEmpty(this.min)) {\n            this.updateModel(event, this.min);\n          }\n          break;\n        case 'End':\n          event.preventDefault();\n          if (isNotEmpty(this.max)) {\n            this.updateModel(event, this.max);\n          }\n          break;\n      }\n    },\n    onInputKeyPress: function onInputKeyPress(event) {\n      if (this.readonly) {\n        return;\n      }\n      var _char = event.key;\n      var isDecimalSign = this.isDecimalSign(_char);\n      var isMinusSign = this.isMinusSign(_char);\n      if (event.code !== 'Enter') {\n        event.preventDefault();\n      }\n      if (Number(_char) >= 0 && Number(_char) <= 9 || isMinusSign || isDecimalSign) {\n        this.insert(event, _char, {\n          isDecimalSign: isDecimalSign,\n          isMinusSign: isMinusSign\n        });\n      }\n    },\n    onPaste: function onPaste(event) {\n      event.preventDefault();\n      var data = (event.clipboardData || window['clipboardData']).getData('Text');\n      if (data) {\n        var filteredData = this.parseValue(data);\n        if (filteredData != null) {\n          this.insert(event, filteredData.toString());\n        }\n      }\n    },\n    allowMinusSign: function allowMinusSign() {\n      return this.min === null || this.min < 0;\n    },\n    isMinusSign: function isMinusSign(_char2) {\n      if (this._minusSign.test(_char2) || _char2 === '-') {\n        this._minusSign.lastIndex = 0;\n        return true;\n      }\n      return false;\n    },\n    isDecimalSign: function isDecimalSign(_char3) {\n      if (this._decimal.test(_char3)) {\n        this._decimal.lastIndex = 0;\n        return true;\n      }\n      return false;\n    },\n    isDecimalMode: function isDecimalMode() {\n      return this.mode === 'decimal';\n    },\n    getDecimalCharIndexes: function getDecimalCharIndexes(val) {\n      var decimalCharIndex = val.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      var filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n      var decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      return {\n        decimalCharIndex: decimalCharIndex,\n        decimalCharIndexWithoutPrefix: decimalCharIndexWithoutPrefix\n      };\n    },\n    getCharIndexes: function getCharIndexes(val) {\n      var decimalCharIndex = val.search(this._decimal);\n      this._decimal.lastIndex = 0;\n      var minusCharIndex = val.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n      var suffixCharIndex = val.search(this._suffix);\n      this._suffix.lastIndex = 0;\n      var currencyCharIndex = val.search(this._currency);\n      this._currency.lastIndex = 0;\n      return {\n        decimalCharIndex: decimalCharIndex,\n        minusCharIndex: minusCharIndex,\n        suffixCharIndex: suffixCharIndex,\n        currencyCharIndex: currencyCharIndex\n      };\n    },\n    insert: function insert(event, text) {\n      var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        isDecimalSign: false,\n        isMinusSign: false\n      };\n      var minusCharIndexOnText = text.search(this._minusSign);\n      this._minusSign.lastIndex = 0;\n      if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n        return;\n      }\n      var selectionStart = this.$refs.input.$el.selectionStart;\n      var selectionEnd = this.$refs.input.$el.selectionEnd;\n      var inputValue = this.$refs.input.$el.value.trim();\n      var _this$getCharIndexes = this.getCharIndexes(inputValue),\n        decimalCharIndex = _this$getCharIndexes.decimalCharIndex,\n        minusCharIndex = _this$getCharIndexes.minusCharIndex,\n        suffixCharIndex = _this$getCharIndexes.suffixCharIndex,\n        currencyCharIndex = _this$getCharIndexes.currencyCharIndex;\n      var newValueStr;\n      if (sign.isMinusSign) {\n        if (selectionStart === 0) {\n          newValueStr = inputValue;\n          if (minusCharIndex === -1 || selectionEnd !== 0) {\n            newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n          }\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else if (sign.isDecimalSign) {\n        if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n          this.updateValue(event, inputValue, text, 'insert');\n        } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, 'insert');\n        }\n      } else {\n        var maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n        var operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n        if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n          if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n            var charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n            newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n            this.updateValue(event, newValueStr, text, operation);\n          }\n        } else {\n          newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, text, operation);\n        }\n      }\n    },\n    insertText: function insertText(value, text, start, end) {\n      var textSplit = text === '.' ? text : text.split('.');\n      if (textSplit.length === 2) {\n        var decimalCharIndex = value.slice(start, end).search(this._decimal);\n        this._decimal.lastIndex = 0;\n        return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n      } else if (end - start === value.length) {\n        return this.formatValue(text);\n      } else if (start === 0) {\n        return text + value.slice(end);\n      } else if (end === value.length) {\n        return value.slice(0, start) + text;\n      } else {\n        return value.slice(0, start) + text + value.slice(end);\n      }\n    },\n    deleteRange: function deleteRange(value, start, end) {\n      var newValueStr;\n      if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n      return newValueStr;\n    },\n    initCursor: function initCursor() {\n      var selectionStart = this.$refs.input.$el.selectionStart;\n      var inputValue = this.$refs.input.$el.value;\n      var valueLength = inputValue.length;\n      var index = null;\n\n      // remove prefix\n      var prefixLength = (this.prefixChar || '').length;\n      inputValue = inputValue.replace(this._prefix, '');\n      selectionStart = selectionStart - prefixLength;\n      var _char4 = inputValue.charAt(selectionStart);\n      if (this.isNumeralChar(_char4)) {\n        return selectionStart + prefixLength;\n      }\n\n      //left\n      var i = selectionStart - 1;\n      while (i >= 0) {\n        _char4 = inputValue.charAt(i);\n        if (this.isNumeralChar(_char4)) {\n          index = i + prefixLength;\n          break;\n        } else {\n          i--;\n        }\n      }\n      if (index !== null) {\n        this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n      } else {\n        i = selectionStart;\n        while (i < valueLength) {\n          _char4 = inputValue.charAt(i);\n          if (this.isNumeralChar(_char4)) {\n            index = i + prefixLength;\n            break;\n          } else {\n            i++;\n          }\n        }\n        if (index !== null) {\n          this.$refs.input.$el.setSelectionRange(index, index);\n        }\n      }\n      return index || 0;\n    },\n    onInputClick: function onInputClick() {\n      var currentValue = this.$refs.input.$el.value;\n      if (!this.readonly && currentValue !== getSelection()) {\n        this.initCursor();\n      }\n    },\n    isNumeralChar: function isNumeralChar(_char5) {\n      if (_char5.length === 1 && (this._numeral.test(_char5) || this._decimal.test(_char5) || this._group.test(_char5) || this._minusSign.test(_char5))) {\n        this.resetRegex();\n        return true;\n      }\n      return false;\n    },\n    resetRegex: function resetRegex() {\n      this._numeral.lastIndex = 0;\n      this._decimal.lastIndex = 0;\n      this._group.lastIndex = 0;\n      this._minusSign.lastIndex = 0;\n    },\n    updateValue: function updateValue(event, valueStr, insertedValueStr, operation) {\n      var currentValue = this.$refs.input.$el.value;\n      var newValue = null;\n      if (valueStr != null) {\n        newValue = this.parseValue(valueStr);\n        newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n        this.updateInput(newValue, insertedValueStr, operation, valueStr);\n        this.handleOnInput(event, currentValue, newValue);\n      }\n    },\n    handleOnInput: function handleOnInput(event, currentValue, newValue) {\n      if (this.isValueChanged(currentValue, newValue)) {\n        this.$emit('input', {\n          originalEvent: event,\n          value: newValue,\n          formattedValue: currentValue\n        });\n      }\n    },\n    isValueChanged: function isValueChanged(currentValue, newValue) {\n      if (newValue === null && currentValue !== null) {\n        return true;\n      }\n      if (newValue != null) {\n        var parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n        return newValue !== parsedCurrentValue;\n      }\n      return false;\n    },\n    validateValue: function validateValue(value) {\n      if (value === '-' || value == null) {\n        return null;\n      }\n      if (this.min != null && value < this.min) {\n        return this.min;\n      }\n      if (this.max != null && value > this.max) {\n        return this.max;\n      }\n      return value;\n    },\n    updateInput: function updateInput(value, insertedValueStr, operation, valueStr) {\n      insertedValueStr = insertedValueStr || '';\n      var inputValue = this.$refs.input.$el.value;\n      var newValue = this.formatValue(value);\n      var currentLength = inputValue.length;\n      if (newValue !== valueStr) {\n        newValue = this.concatValues(newValue, valueStr);\n      }\n      if (currentLength === 0) {\n        this.$refs.input.$el.value = newValue;\n        this.$refs.input.$el.setSelectionRange(0, 0);\n        var index = this.initCursor();\n        var selectionEnd = index + insertedValueStr.length;\n        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n      } else {\n        var selectionStart = this.$refs.input.$el.selectionStart;\n        var _selectionEnd = this.$refs.input.$el.selectionEnd;\n        this.$refs.input.$el.value = newValue;\n        var newLength = newValue.length;\n        if (operation === 'range-insert') {\n          var startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n          var startValueStr = startValue !== null ? startValue.toString() : '';\n          var startExpr = startValueStr.split('').join(\"(\".concat(this.groupChar, \")?\"));\n          var sRegex = new RegExp(startExpr, 'g');\n          sRegex.test(newValue);\n          var tExpr = insertedValueStr.split('').join(\"(\".concat(this.groupChar, \")?\"));\n          var tRegex = new RegExp(tExpr, 'g');\n          tRegex.test(newValue.slice(sRegex.lastIndex));\n          _selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n          this.$refs.input.$el.setSelectionRange(_selectionEnd, _selectionEnd);\n        } else if (newLength === currentLength) {\n          if (operation === 'insert' || operation === 'delete-back-single') {\n            this.$refs.input.$el.setSelectionRange(_selectionEnd + 1, _selectionEnd + 1);\n          } else if (operation === 'delete-single') {\n            this.$refs.input.$el.setSelectionRange(_selectionEnd - 1, _selectionEnd - 1);\n          } else if (operation === 'delete-range' || operation === 'spin') {\n            this.$refs.input.$el.setSelectionRange(_selectionEnd, _selectionEnd);\n          }\n        } else if (operation === 'delete-back-single') {\n          var prevChar = inputValue.charAt(_selectionEnd - 1);\n          var nextChar = inputValue.charAt(_selectionEnd);\n          var diff = currentLength - newLength;\n          var isGroupChar = this._group.test(nextChar);\n          if (isGroupChar && diff === 1) {\n            _selectionEnd += 1;\n          } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n            _selectionEnd += -1 * diff + 1;\n          }\n          this._group.lastIndex = 0;\n          this.$refs.input.$el.setSelectionRange(_selectionEnd, _selectionEnd);\n        } else if (inputValue === '-' && operation === 'insert') {\n          this.$refs.input.$el.setSelectionRange(0, 0);\n          var _index = this.initCursor();\n          var _selectionEnd2 = _index + insertedValueStr.length + 1;\n          this.$refs.input.$el.setSelectionRange(_selectionEnd2, _selectionEnd2);\n        } else {\n          _selectionEnd = _selectionEnd + (newLength - currentLength);\n          this.$refs.input.$el.setSelectionRange(_selectionEnd, _selectionEnd);\n        }\n      }\n      this.$refs.input.$el.setAttribute('aria-valuenow', value);\n    },\n    concatValues: function concatValues(val1, val2) {\n      if (val1 && val2) {\n        var decimalCharIndex = val2.search(this._decimal);\n        this._decimal.lastIndex = 0;\n        if (this.suffixChar) {\n          return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n        } else {\n          return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n        }\n      }\n      return val1;\n    },\n    getDecimalLength: function getDecimalLength(value) {\n      if (value) {\n        var valueSplit = value.split(this._decimal);\n        if (valueSplit.length === 2) {\n          return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n        }\n      }\n      return 0;\n    },\n    updateModel: function updateModel(event, value) {\n      this.d_modelValue = value;\n      this.$emit('update:modelValue', value);\n    },\n    onInputFocus: function onInputFocus(event) {\n      this.focused = true;\n      if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== getSelection() && this.highlightOnFocus) {\n        event.target.select();\n      }\n      this.$emit('focus', event);\n    },\n    onInputBlur: function onInputBlur(event) {\n      this.focused = false;\n      var input = event.target;\n      var newValue = this.validateValue(this.parseValue(input.value));\n      this.$emit('blur', {\n        originalEvent: event,\n        value: input.value\n      });\n      input.value = this.formatValue(newValue);\n      input.setAttribute('aria-valuenow', newValue);\n      this.updateModel(event, newValue);\n      if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n        clearSelection();\n      }\n    },\n    clearTimer: function clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n      }\n    },\n    maxBoundry: function maxBoundry() {\n      return this.d_modelValue >= this.max;\n    },\n    minBoundry: function minBoundry() {\n      return this.d_modelValue <= this.min;\n    }\n  },\n  computed: {\n    filled: function filled() {\n      return this.modelValue != null && this.modelValue.toString().length > 0;\n    },\n    upButtonListeners: function upButtonListeners() {\n      var _this2 = this;\n      return {\n        mousedown: function mousedown(event) {\n          return _this2.onUpButtonMouseDown(event);\n        },\n        mouseup: function mouseup(event) {\n          return _this2.onUpButtonMouseUp(event);\n        },\n        mouseleave: function mouseleave(event) {\n          return _this2.onUpButtonMouseLeave(event);\n        },\n        keydown: function keydown(event) {\n          return _this2.onUpButtonKeyDown(event);\n        },\n        keyup: function keyup(event) {\n          return _this2.onUpButtonKeyUp(event);\n        }\n      };\n    },\n    downButtonListeners: function downButtonListeners() {\n      var _this3 = this;\n      return {\n        mousedown: function mousedown(event) {\n          return _this3.onDownButtonMouseDown(event);\n        },\n        mouseup: function mouseup(event) {\n          return _this3.onDownButtonMouseUp(event);\n        },\n        mouseleave: function mouseleave(event) {\n          return _this3.onDownButtonMouseLeave(event);\n        },\n        keydown: function keydown(event) {\n          return _this3.onDownButtonKeyDown(event);\n        },\n        keyup: function keyup(event) {\n          return _this3.onDownButtonKeyUp(event);\n        }\n      };\n    },\n    formattedValue: function formattedValue() {\n      var val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n      return this.formatValue(val);\n    },\n    getFormatter: function getFormatter() {\n      return this.numberFormat;\n    },\n    hasFluid: function hasFluid() {\n      return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n    }\n  },\n  components: {\n    InputText: InputText,\n    AngleUpIcon: AngleUpIcon,\n    AngleDownIcon: AngleDownIcon\n  }\n};\nvar _hoisted_1 = [\"disabled\"];\nvar _hoisted_2 = [\"disabled\"];\nvar _hoisted_3 = [\"disabled\"];\nvar _hoisted_4 = [\"disabled\"];\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_InputText = resolveComponent(\"InputText\");\n  return openBlock(), createElementBlock(\"span\", mergeProps({\n    \"class\": _ctx.cx('root')\n  }, _ctx.ptmi('root')), [createVNode(_component_InputText, {\n    ref: \"input\",\n    id: _ctx.inputId,\n    role: \"spinbutton\",\n    \"class\": normalizeClass([_ctx.cx('pcInput'), _ctx.inputClass]),\n    style: normalizeStyle(_ctx.inputStyle),\n    value: $options.formattedValue,\n    \"aria-valuemin\": _ctx.min,\n    \"aria-valuemax\": _ctx.max,\n    \"aria-valuenow\": _ctx.modelValue,\n    inputmode: _ctx.mode === 'decimal' && !_ctx.minFractionDigits ? 'numeric' : 'decimal',\n    disabled: _ctx.disabled,\n    readonly: _ctx.readonly,\n    placeholder: _ctx.placeholder,\n    \"aria-labelledby\": _ctx.ariaLabelledby,\n    \"aria-label\": _ctx.ariaLabel,\n    invalid: _ctx.invalid,\n    variant: _ctx.variant,\n    onInput: $options.onUserInput,\n    onKeydown: $options.onInputKeyDown,\n    onKeypress: $options.onInputKeyPress,\n    onPaste: $options.onPaste,\n    onClick: $options.onInputClick,\n    onFocus: $options.onInputFocus,\n    onBlur: $options.onInputBlur,\n    pt: _ctx.ptm('pcInput'),\n    unstyled: _ctx.unstyled\n  }, null, 8, [\"id\", \"class\", \"style\", \"value\", \"aria-valuemin\", \"aria-valuemax\", \"aria-valuenow\", \"inputmode\", \"disabled\", \"readonly\", \"placeholder\", \"aria-labelledby\", \"aria-label\", \"invalid\", \"variant\", \"onInput\", \"onKeydown\", \"onKeypress\", \"onPaste\", \"onClick\", \"onFocus\", \"onBlur\", \"pt\", \"unstyled\"]), _ctx.showButtons && _ctx.buttonLayout === 'stacked' ? (openBlock(), createElementBlock(\"span\", mergeProps({\n    key: 0,\n    \"class\": _ctx.cx('buttonGroup')\n  }, _ctx.ptm('buttonGroup')), [renderSlot(_ctx.$slots, \"incrementbutton\", {\n    listeners: $options.upButtonListeners\n  }, function () {\n    return [createElementVNode(\"button\", mergeProps({\n      \"class\": [_ctx.cx('incrementButton'), _ctx.incrementButtonClass]\n    }, toHandlers($options.upButtonListeners, true), {\n      disabled: _ctx.disabled,\n      tabindex: -1,\n      \"aria-hidden\": \"true\",\n      type: \"button\"\n    }, _ctx.ptm('incrementButton')), [renderSlot(_ctx.$slots, _ctx.$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon', {}, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.incrementIcon || _ctx.incrementButtonIcon ? 'span' : 'AngleUpIcon'), mergeProps({\n        \"class\": [_ctx.incrementIcon, _ctx.incrementButtonIcon]\n      }, _ctx.ptm('incrementIcon'), {\n        \"data-pc-section\": \"incrementicon\"\n      }), null, 16, [\"class\"]))];\n    })], 16, _hoisted_1)];\n  }), renderSlot(_ctx.$slots, \"decrementbutton\", {\n    listeners: $options.downButtonListeners\n  }, function () {\n    return [createElementVNode(\"button\", mergeProps({\n      \"class\": [_ctx.cx('decrementButton'), _ctx.decrementButtonClass]\n    }, toHandlers($options.downButtonListeners, true), {\n      disabled: _ctx.disabled,\n      tabindex: -1,\n      \"aria-hidden\": \"true\",\n      type: \"button\"\n    }, _ctx.ptm('decrementButton')), [renderSlot(_ctx.$slots, _ctx.$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon', {}, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.decrementIcon || _ctx.decrementButtonIcon ? 'span' : 'AngleDownIcon'), mergeProps({\n        \"class\": [_ctx.decrementIcon, _ctx.decrementButtonIcon]\n      }, _ctx.ptm('decrementIcon'), {\n        \"data-pc-section\": \"decrementicon\"\n      }), null, 16, [\"class\"]))];\n    })], 16, _hoisted_2)];\n  })], 16)) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"incrementbutton\", {\n    listeners: $options.upButtonListeners\n  }, function () {\n    return [_ctx.showButtons && _ctx.buttonLayout !== 'stacked' ? (openBlock(), createElementBlock(\"button\", mergeProps({\n      key: 0,\n      \"class\": [_ctx.cx('incrementButton'), _ctx.incrementButtonClass]\n    }, toHandlers($options.upButtonListeners, true), {\n      disabled: _ctx.disabled,\n      tabindex: -1,\n      \"aria-hidden\": \"true\",\n      type: \"button\"\n    }, _ctx.ptm('incrementButton')), [renderSlot(_ctx.$slots, _ctx.$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon', {}, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.incrementIcon || _ctx.incrementButtonIcon ? 'span' : 'AngleUpIcon'), mergeProps({\n        \"class\": [_ctx.incrementIcon, _ctx.incrementButtonIcon]\n      }, _ctx.ptm('incrementIcon'), {\n        \"data-pc-section\": \"incrementicon\"\n      }), null, 16, [\"class\"]))];\n    })], 16, _hoisted_3)) : createCommentVNode(\"\", true)];\n  }), renderSlot(_ctx.$slots, \"decrementbutton\", {\n    listeners: $options.downButtonListeners\n  }, function () {\n    return [_ctx.showButtons && _ctx.buttonLayout !== 'stacked' ? (openBlock(), createElementBlock(\"button\", mergeProps({\n      key: 0,\n      \"class\": [_ctx.cx('decrementButton'), _ctx.decrementButtonClass]\n    }, toHandlers($options.downButtonListeners, true), {\n      disabled: _ctx.disabled,\n      tabindex: -1,\n      \"aria-hidden\": \"true\",\n      type: \"button\"\n    }, _ctx.ptm('decrementButton')), [renderSlot(_ctx.$slots, _ctx.$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon', {}, function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.decrementIcon || _ctx.decrementButtonIcon ? 'span' : 'AngleDownIcon'), mergeProps({\n        \"class\": [_ctx.decrementIcon, _ctx.decrementButtonIcon]\n      }, _ctx.ptm('decrementIcon'), {\n        \"data-pc-section\": \"decrementicon\"\n      }), null, 16, [\"class\"]))];\n    })], 16, _hoisted_4)) : createCommentVNode(\"\", true)];\n  })], 16);\n}\nscript.render = render;\nexport { script as default };","map":{"version":3,"names":["script$1","name","BaseComponent","props","modelValue","type","Number","format","Boolean","showButtons","buttonLayout","String","incrementButtonClass","decrementButtonClass","incrementButtonIcon","undefined","incrementIcon","decrementButtonIcon","decrementIcon","locale","localeMatcher","mode","prefix","suffix","currency","currencyDisplay","useGrouping","minFractionDigits","maxFractionDigits","roundingMode","validator","value","includes","min","max","step","allowEmpty","highlightOnFocus","readonly","variant","invalid","disabled","placeholder","fluid","inputId","inputClass","Object","inputStyle","ariaLabelledby","ariaLabel","style","InputNumberStyle","provide","$pcInputNumber","$parentInstance","script","inheritAttrs","emits","inject","$pcFluid","numberFormat","_numeral","_decimal","_group","_minusSign","_currency","_suffix","_prefix","_index","groupChar","isSpecialChar","prefixChar","suffixChar","timer","data","d_modelValue","focused","watch","newValue","oldValue","updateConstructParser","created","constructParser","methods","getOptions","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","numerals","_toConsumableArray","reverse","index","Map","map","d","i","RegExp","concat","join","getGroupingExpression","getMinusSignExpression","getCurrencyExpression","getDecimalExpression","getSuffixExpression","getPrefixExpression","get","escapeRegExp","text","replace","formatter","_objectSpread","trim","charAt","split","formatValue","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","_this","clearTimer","setTimeout","spin","$refs","input","currentValue","$el","validateValue","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyUp","onUpButtonKeyDown","code","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","lastValue","onInputKeyDown","altKey","ctrlKey","metaKey","target","selectionStart","selectionEnd","inputValue","newValueStr","isNumeralChar","setAttribute","deleteChar","_this$getDecimalCharI","getDecimalCharIndexes","decimalCharIndex","decimalCharIndexWithoutPrefix","decimalLength","getDecimalLength","test","lastIndex","slice","setSelectionRange","insertedText","isDecimalMode","updateValue","deleteRange","_deleteChar","_this$getDecimalCharI2","_decimalCharIndex","_decimalCharIndexWithoutPrefix","_decimalLength","_insertedText","isNotEmpty","onInputKeyPress","_char","key","isDecimalSign","isMinusSign","insert","onPaste","clipboardData","window","getData","filteredData","allowMinusSign","_char2","_char3","val","search","filteredVal","getCharIndexes","minusCharIndex","suffixCharIndex","currencyCharIndex","sign","arguments","length","minusCharIndexOnText","_this$getCharIndexes","insertText","resolvedOptions","operation","charIndex","start","end","textSplit","initCursor","valueLength","prefixLength","_char4","onInputClick","getSelection","_char5","resetRegex","valueStr","insertedValueStr","isValueChanged","$emit","originalEvent","parsedCurrentValue","currentLength","concatValues","_selectionEnd","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","_selectionEnd2","val1","val2","valueSplit","onInputFocus","select","onInputBlur","clearSelection","clearInterval","maxBoundry","minBoundry","computed","filled","upButtonListeners","_this2","mousedown","mouseup","mouseleave","keydown","keyup","downButtonListeners","_this3","getFormatter","hasFluid","isEmpty","components","InputText","AngleUpIcon","AngleDownIcon","openBlock","createElementBlock","mergeProps","_ctx","cx","ptmi","createVNode","_component_InputText","ref","id","role","normalizeClass","normalizeStyle","$options","inputmode","onInput","onKeydown","onKeypress","onClick","onFocus","onBlur","pt","ptm","unstyled","renderSlot","$slots","listeners","createElementVNode","toHandlers","tabindex","incrementicon","createBlock","resolveDynamicComponent","decrementicon"],"sources":["../../src/inputnumber/BaseInputNumber.vue","../../src/inputnumber/InputNumber.vue","../../src/inputnumber/InputNumber.vue?vue&type=template&id=22ac7d4c&lang.js"],"sourcesContent":["<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport InputNumberStyle from 'primevue/inputnumber/style';\n\nexport default {\n    name: 'BaseInputNumber',\n    extends: BaseComponent,\n    props: {\n        modelValue: {\n            type: Number,\n            default: null\n        },\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: undefined\n        },\n        incrementIcon: {\n            type: String,\n            default: undefined\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: undefined\n        },\n        decrementIcon: {\n            type: String,\n            default: undefined\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        roundingMode: {\n            type: String,\n            default: 'halfExpand',\n            validator(value) {\n                return ['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven'].includes(value);\n            }\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        variant: {\n            type: String,\n            default: null\n        },\n        invalid: {\n            type: Boolean,\n            default: false\n        },\n        disabled: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        fluid: {\n            type: Boolean,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: InputNumberStyle,\n    provide() {\n        return {\n            $pcInputNumber: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <span :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <InputText\n            ref=\"input\"\n            :id=\"inputId\"\n            role=\"spinbutton\"\n            :class=\"[cx('pcInput'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"formattedValue\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"modelValue\"\n            :inputmode=\"mode === 'decimal' && !minFractionDigits ? 'numeric' : 'decimal'\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :placeholder=\"placeholder\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            @input=\"onUserInput\"\n            @keydown=\"onInputKeyDown\"\n            @keypress=\"onInputKeyPress\"\n            @paste=\"onPaste\"\n            @click=\"onInputClick\"\n            @focus=\"onInputFocus\"\n            @blur=\"onInputBlur\"\n            :pt=\"ptm('pcInput')\"\n            :unstyled=\"unstyled\"\n        />\n        <span v-if=\"showButtons && buttonLayout === 'stacked'\" :class=\"cx('buttonGroup')\" v-bind=\"ptm('buttonGroup')\">\n            <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n                <button :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                    <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                        <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n            <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n                <button :class=\"[cx('decrementButton'), decrementButtonClass]\" v-on=\"downButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('decrementButton')\">\n                    <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                        <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n        </span>\n        <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n            <button v-if=\"showButtons && buttonLayout !== 'stacked'\" :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                    <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n            <button\n                v-if=\"showButtons && buttonLayout !== 'stacked'\"\n                :class=\"[cx('decrementButton'), decrementButtonClass]\"\n                v-on=\"downButtonListeners\"\n                :disabled=\"disabled\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                type=\"button\"\n                v-bind=\"ptm('decrementButton')\"\n            >\n                <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                    <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <!-- TODO: decrementButton* and incrementButton* are deprecated since v4.0-->\n    </span>\n</template>\n\n<script>\nimport { clearSelection, getSelection } from '@primeuix/utils/dom';\nimport { isEmpty, isNotEmpty } from '@primeuix/utils/object';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseInputNumber from './BaseInputNumber.vue';\n\nexport default {\n    name: 'InputNumber',\n    extends: BaseInputNumber,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'input', 'focus', 'blur'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_modelValue: this.modelValue,\n            focused: false\n        };\n    },\n    watch: {\n        modelValue(newValue) {\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits,\n                roundingMode: this.roundingMode\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            if (event.altKey || event.ctrlKey || event.metaKey) {\n                this.isSpecialChar = true;\n                this.lastValue = this.$refs.input.$el.value;\n\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            switch (event.code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                case 'NumpadEnter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.min)) {\n                        this.updateModel(event, this.min);\n                    }\n\n                    break;\n\n                case 'End':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.max)) {\n                        this.updateModel(event, this.max);\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let char = event.key;\n            let isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if (event.code !== 'Enter') {\n                event.preventDefault();\n            }\n\n            if ((Number(char) >= 0 && Number(char) <= 9) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    } else if (operation === 'delete-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    } else if (operation === 'delete-range' || operation === 'spin') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                    }\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_modelValue = value;\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n\n            if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n                clearSelection();\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_modelValue >= this.max;\n        },\n        minBoundry() {\n            return this.d_modelValue <= this.min;\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        }\n    },\n    components: {\n        InputText,\n        AngleUpIcon,\n        AngleDownIcon\n    }\n};\n</script>\n","<template>\n    <span :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <InputText\n            ref=\"input\"\n            :id=\"inputId\"\n            role=\"spinbutton\"\n            :class=\"[cx('pcInput'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"formattedValue\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"modelValue\"\n            :inputmode=\"mode === 'decimal' && !minFractionDigits ? 'numeric' : 'decimal'\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :placeholder=\"placeholder\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            @input=\"onUserInput\"\n            @keydown=\"onInputKeyDown\"\n            @keypress=\"onInputKeyPress\"\n            @paste=\"onPaste\"\n            @click=\"onInputClick\"\n            @focus=\"onInputFocus\"\n            @blur=\"onInputBlur\"\n            :pt=\"ptm('pcInput')\"\n            :unstyled=\"unstyled\"\n        />\n        <span v-if=\"showButtons && buttonLayout === 'stacked'\" :class=\"cx('buttonGroup')\" v-bind=\"ptm('buttonGroup')\">\n            <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n                <button :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                    <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                        <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n            <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n                <button :class=\"[cx('decrementButton'), decrementButtonClass]\" v-on=\"downButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('decrementButton')\">\n                    <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                        <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n        </span>\n        <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n            <button v-if=\"showButtons && buttonLayout !== 'stacked'\" :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                    <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n            <button\n                v-if=\"showButtons && buttonLayout !== 'stacked'\"\n                :class=\"[cx('decrementButton'), decrementButtonClass]\"\n                v-on=\"downButtonListeners\"\n                :disabled=\"disabled\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                type=\"button\"\n                v-bind=\"ptm('decrementButton')\"\n            >\n                <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                    <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <!-- TODO: decrementButton* and incrementButton* are deprecated since v4.0-->\n    </span>\n</template>\n\n<script>\nimport { clearSelection, getSelection } from '@primeuix/utils/dom';\nimport { isEmpty, isNotEmpty } from '@primeuix/utils/object';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseInputNumber from './BaseInputNumber.vue';\n\nexport default {\n    name: 'InputNumber',\n    extends: BaseInputNumber,\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'input', 'focus', 'blur'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_modelValue: this.modelValue,\n            focused: false\n        };\n    },\n    watch: {\n        modelValue(newValue) {\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits,\n                roundingMode: this.roundingMode\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            if (event.altKey || event.ctrlKey || event.metaKey) {\n                this.isSpecialChar = true;\n                this.lastValue = this.$refs.input.$el.value;\n\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            switch (event.code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                case 'NumpadEnter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.min)) {\n                        this.updateModel(event, this.min);\n                    }\n\n                    break;\n\n                case 'End':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.max)) {\n                        this.updateModel(event, this.max);\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let char = event.key;\n            let isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if (event.code !== 'Enter') {\n                event.preventDefault();\n            }\n\n            if ((Number(char) >= 0 && Number(char) <= 9) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    } else if (operation === 'delete-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    } else if (operation === 'delete-range' || operation === 'spin') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                    }\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_modelValue = value;\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n\n            if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n                clearSelection();\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_modelValue >= this.max;\n        },\n        minBoundry() {\n            return this.d_modelValue <= this.min;\n        }\n    },\n    computed: {\n        filled() {\n            return this.modelValue != null && this.modelValue.toString().length > 0;\n        },\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.modelValue && !this.allowEmpty ? 0 : this.modelValue;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        },\n        hasFluid() {\n            return isEmpty(this.fluid) ? !!this.$pcFluid : this.fluid;\n        }\n    },\n    components: {\n        InputText,\n        AngleUpIcon,\n        AngleDownIcon\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}