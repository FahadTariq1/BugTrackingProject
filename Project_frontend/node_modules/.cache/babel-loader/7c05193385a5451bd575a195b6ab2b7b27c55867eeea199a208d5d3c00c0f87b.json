{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'PopUpNewTask',\n  props: {\n    isVisible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  data() {\n    return {\n      developers: [],\n      selectedDeveloper: null\n    };\n  },\n  methods: {\n    closeModal() {\n      this.$emit('update:isVisible', false);\n    },\n    async fetchDevelopers() {\n      try {\n        const response = await axios.get('http://localhost:8000/BugUsers/developers/');\n        this.developers = response.data;\n      } catch (error) {\n        console.error('Error fetching developers:', error);\n      }\n    },\n    onDeveloperChange(event) {\n      console.log('Selected developer ID:', this.selectedDeveloper);\n      // Handle developer selection if needed\n    }\n  },\n  watch: {\n    isVisible(newVal) {\n      if (newVal) {\n        this.fetchDevelopers();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","isVisible","type","Boolean","required","data","developers","selectedDeveloper","methods","closeModal","$emit","fetchDevelopers","response","get","error","console","onDeveloperChange","event","log","watch","newVal"],"sources":["/home/ali/BugTrackerProject/Frontend/bugtrackingfrontend/src/components/PopUpNewTask.vue"],"sourcesContent":["<template>\n    <div class=\"modal\" v-if=\"isVisible\">\n      <div class=\"modal-content\">\n        <span class=\"close\" @click=\"closeModal\">&times;</span>\n        <div class=\"topheadergray\">\n          <div class=\"header-content\">\n            <h2>Add new bug</h2>\n            <i class=\"fas fa-ellipsis-h\"></i> <!-- Ellipsis icon -->\n          </div>\n        </div>\n        <hr>\n        <p class=\"assign-text\">Assign to </p>\n        <!-- Dropdown menu -->\n        <div class=\"dropdown\">\n          <select v-model=\"selectedDeveloper\" @change=\"onDeveloperChange\">\n            <option value=\"\" disabled>Select Developer</option>\n            <option v-for=\"developer in developers\" :key=\"developer.id\" :value=\"developer.id\">\n              {{ developer.name }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  \n  export default {\n    name: 'PopUpNewTask',\n    props: {\n      isVisible: {\n        type: Boolean,\n        required: true\n      }\n    },\n    data() {\n      return {\n        developers: [],\n        selectedDeveloper: null\n      };\n    },\n    methods: {\n      closeModal() {\n        this.$emit('update:isVisible', false);\n      },\n      async fetchDevelopers() {\n        try {\n          const response = await axios.get('http://localhost:8000/BugUsers/developers/');\n          this.developers = response.data;\n        } catch (error) {\n          console.error('Error fetching developers:', error);\n        }\n      },\n      onDeveloperChange(event) {\n        console.log('Selected developer ID:', this.selectedDeveloper);\n        // Handle developer selection if needed\n      }\n    },\n    watch: {\n      isVisible(newVal) {\n        if (newVal) {\n          this.fetchDevelopers();\n        }\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .modal-content {\n    background-color: white;\n    padding: 20px;\n    border-radius: 5px;\n    width: 50%;\n    max-width: 600px;\n    position: relative;\n    min-width: 50%;\n    min-height: 90%;\n  }\n  \n  .close {\n    border: 2px solid black;\n    background-color: black;\n    color: white;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 30px;\n    cursor: pointer;\n  }\n  \n  .topheadergray {\n    margin-top: 20px;\n    border-radius: 5px 5px 0 0;\n    margin-bottom: 10px;\n    position: relative; /* Ensure the ellipsis icon can be positioned absolutely */\n  }\n  \n  .header-content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between; /* Space out content to push ellipsis to the end */\n  }\n  \n  .header-content i {\n    font-size: 20px; /* Adjust size of the ellipsis icon */\n    color: gray; /* Color of the ellipsis icon */\n    margin-left: auto; /* Pushes the ellipsis icon to the end */\n  }\n  \n  hr {\n    border: 0;\n    height: 1px;\n    background: gray; /* Color of the line */\n    width: 100vw; /* Full width of the viewport */\n    position: absolute;\n    left: 50%;\n    transform: translateX(-50%); /* Center the line horizontally */\n    top: 100px; /* Adjust the top value to position the line as needed */\n  }\n  \n  .dropdown {\n    margin-top: 10px; /* Space between the text and dropdown */\n  }\n  \n  select {\n    width: 100%;\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 16px;\n  }\n  </style>\n  "],"mappings":"AA0BE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,OAAO;MACbC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,MAAMC,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,4CAA4C,CAAC;QAC9E,IAAI,CAACP,UAAS,GAAIM,QAAQ,CAACP,IAAI;MACjC,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDE,iBAAiBA,CAACC,KAAK,EAAE;MACvBF,OAAO,CAACG,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAACX,iBAAiB,CAAC;MAC7D;IACF;EACF,CAAC;EACDY,KAAK,EAAE;IACLlB,SAASA,CAACmB,MAAM,EAAE;MAChB,IAAIA,MAAM,EAAE;QACV,IAAI,CAACT,eAAe,CAAC,CAAC;MACxB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}