{"ast":null,"code":"import axios from 'axios';\nimport FileUpload from 'primevue/fileupload';\nimport Button from 'primevue/button';\nexport default {\n  name: 'PopUpNewTask',\n  props: {\n    isVisible: {\n      type: Boolean,\n      required: true\n    }\n  },\n  components: {\n    FileUpload,\n    Button\n  },\n  data() {\n    return {\n      developers: [],\n      selectedDeveloper: null,\n      dueDate: '',\n      title: '',\n      bugDetails: '',\n      file: null,\n      // Store the uploaded file\n      bug_screenshot_type: '' // Store the file type\n    };\n  },\n  methods: {\n    closeModal() {\n      this.$emit('update:isVisible', false);\n    },\n    async fetchDevelopers() {\n      try {\n        const response = await axios.get('http://localhost:8000/BugUsers/developers/');\n        this.developers = response.data;\n        console.log(this.developers);\n      } catch (error) {\n        console.error('Error fetching developers:', error);\n      }\n    },\n    onDeveloperChange() {\n      console.log('Selected developer ID:', this.selectedDeveloper);\n    },\n    onSelect(event) {\n      // Capture the file names\n      this.file = event.files[0]; // Assume only one file is uploaded at a time\n      const mimeType = this.file.type;\n      this.bug_screenshot_type = mimeType.split('/')[1]; // Extract the part after the \"/\"\n      console.log('File selected:', this.file.name);\n      console.log('File type:', this.bug_screenshot_type);\n    },\n    upload() {\n      console.log('Hello');\n      console.log(this.filename);\n    },\n    remove() {\n      this.file = null; // Reset the file property\n      this.$refs.fileupload.clear(); // Clear the FileUpload input\n      console.log(\"File removed\");\n    }\n  },\n  watch: {\n    isVisible(newVal) {\n      if (newVal) {\n        this.fetchDevelopers();\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","FileUpload","Button","name","props","isVisible","type","Boolean","required","components","data","developers","selectedDeveloper","dueDate","title","bugDetails","file","bug_screenshot_type","methods","closeModal","$emit","fetchDevelopers","response","get","console","log","error","onDeveloperChange","onSelect","event","files","mimeType","split","upload","filename","remove","$refs","fileupload","clear","watch","newVal"],"sources":["/home/ali/BugTrackerProject/Frontend/bugtrackingfrontend/src/components/PopUpNewTask.vue"],"sourcesContent":["<template>\n    <div class=\"modal\" v-if=\"isVisible\" @click.self=\"closeModal\">\n      <div class=\"modal-content\">\n        <span class=\"close\" @click=\"closeModal\">&times;</span>\n        <div class=\"topheadergray\">\n          <div class=\"header-content\">\n            <h2>Add new bug</h2>\n            <i class=\"fas fa-ellipsis-h\"></i>\n          </div>\n        </div>\n        <hr>\n        <div class=\"form-container\">\n          <div class=\"assign-container\">\n            <p class=\"assign-text\">Assign to</p>\n            <div class=\"dropdown\">\n              <select v-model=\"selectedDeveloper\" @change=\"onDeveloperChange\">\n                <option value=\"\" disabled>Select Developer</option>\n                <option v-for=\"developer in developers\" :key=\"developer.id\" :value=\"developer.id\">\n                  {{ developer.user_name }}\n                </option>\n              </select>\n            </div>\n          </div>\n          <div class=\"due-date-container\">\n            <p class=\"due-date-text\">Add Due Date</p>\n            <input type=\"date\" v-model=\"dueDate\" />\n          </div>\n          <div class=\"title-container\">\n            <input type=\"text\" v-model=\"title\" placeholder=\"Add title here\" />\n          </div>\n          <div class=\"bug-details-container\">\n            <h4>Bug Details</h4>\n            <input type=\"text\" v-model=\"bugDetails\" placeholder=\"Enter details here\" />\n          </div>\n          <div class=\"file-upload-container\">\n            <FileUpload ref=\"fileupload\" mode=\"basic\" name=\"file\" url=\"/api/upload\" accept=\"image/png, image/gif\" :maxFileSize=\"1000000\" @select=\"onSelect\" />\n            <div class=\"file-upload-container2\">\n                <Button label=\"Upload\" @click=\"upload\" severity=\"secondary\" />\n                <Button label=\"Remove\" @click=\"remove\" severity=\"secondary\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import FileUpload from 'primevue/fileupload';\n  import Button from 'primevue/button';\n  \n  export default {\n    name: 'PopUpNewTask',\n    props: {\n      isVisible: {\n        type: Boolean,\n        required: true\n      }\n    },\n    components: {\n      FileUpload,\n      Button\n    },\n    data() {\n      return {\n        developers: [],\n        selectedDeveloper: null,\n        dueDate: '',\n        title: '',\n        bugDetails: '',\n        file: null,  // Store the uploaded file\n        bug_screenshot_type: ''  // Store the file type\n      };\n    },\n    methods: {\n      closeModal() {\n        this.$emit('update:isVisible', false);\n      },\n      async fetchDevelopers() {\n        try {\n          const response = await axios.get('http://localhost:8000/BugUsers/developers/');\n          this.developers = response.data;\n          console.log(this.developers);\n        } catch (error) {\n          console.error('Error fetching developers:', error);\n        }\n      },\n      onDeveloperChange() {\n        console.log('Selected developer ID:', this.selectedDeveloper);\n      },\n      onSelect(event) {\n      // Capture the file names\n      this.file = event.files[0]; // Assume only one file is uploaded at a time\n      const mimeType = this.file.type;\n    this.bug_screenshot_type = mimeType.split('/')[1]; // Extract the part after the \"/\"\n    console.log('File selected:', this.file.name);\n    console.log('File type:', this.bug_screenshot_type);\n    },\n      upload() {\n        console.log('Hello')\n        console.log(this.filename)\n      },\n      remove() {\n  this.file = null; // Reset the file property\n  this.$refs.fileupload.clear(); // Clear the FileUpload input\n  console.log(\"File removed\");\n}\n\n    },\n    watch: {\n      isVisible(newVal) {\n        if (newVal) {\n          this.fetchDevelopers();\n        }\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .file-upload-container2 {\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n  }\n  \n  .modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    background-color: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .modal-content {\n    background-color: white;\n    padding: 20px;\n    border-radius: 5px;\n    width: 50%;\n    max-width: 600px;\n    position: relative;\n  }\n  \n  .close {\n    border: 2px solid black;\n    background-color: black;\n    color: white;\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    font-size: 30px;\n    cursor: pointer;\n  }\n  \n  .topheadergray {\n    margin-top: 20px;\n    border-radius: 5px 5px 0 0;\n    margin-bottom: 10px;\n    position: relative;\n  }\n  \n  .header-content {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n  \n  .header-content i {\n    font-size: 20px;\n    color: gray;\n  }\n  \n  hr {\n    border: 0;\n    height: 1px;\n    background: gray;\n    width: 100%;\n  }\n  \n  .form-container {\n    margin-top: 10px;\n  }\n  \n  .assign-container {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  \n  .assign-text {\n    margin-right: 10px;\n  }\n  \n  .dropdown select {\n    padding: 5px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 14px;\n    width: 150px;\n  }\n  \n  .due-date-container {\n    display: flex;\n    align-items: center;\n    margin-bottom: 10px;\n  }\n  \n  .due-date-text {\n    margin-right: 10px;\n  }\n  \n  input[type=\"date\"] {\n    padding: 5px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 14px;\n  }\n  \n  .title-container {\n    display: flex;\n    align-items: center;\n  }\n  \n  input[type=\"text\"] {\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 16px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n  \n  .bug-details-container {\n    margin-top: 20px;\n  }\n  \n  .bug-details-container h4 {\n    margin-bottom: 10px;\n    font-size: 18px;\n  }\n  \n  .bug-details-container input[type=\"text\"] {\n    padding: 10px;\n    border-radius: 5px;\n    border: 1px solid #ddd;\n    font-size: 16px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n  .file-upload-container{\n    margin-top: 20px;\n  }\n  </style>\n"],"mappings":"AA+CE,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,UAAS,MAAO,qBAAqB;AAC5C,OAAOC,MAAK,MAAO,iBAAiB;AAEpC,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,KAAK,EAAE;IACLC,SAAS,EAAE;MACTC,IAAI,EAAEC,OAAO;MACbC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,UAAU,EAAE;IACVR,UAAU;IACVC;EACF,CAAC;EACDQ,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,iBAAiB,EAAE,IAAI;MACvBC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,IAAI,EAAE,IAAI;MAAG;MACbC,mBAAmB,EAAE,EAAC,CAAG;IAC3B,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC;IACvC,CAAC;IACD,MAAMC,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMtB,KAAK,CAACuB,GAAG,CAAC,4CAA4C,CAAC;QAC9E,IAAI,CAACZ,UAAS,GAAIW,QAAQ,CAACZ,IAAI;QAC/Bc,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,UAAU,CAAC;MAC9B,EAAE,OAAOe,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACDC,iBAAiBA,CAAA,EAAG;MAClBH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,IAAI,CAACb,iBAAiB,CAAC;IAC/D,CAAC;IACDgB,QAAQA,CAACC,KAAK,EAAE;MAChB;MACA,IAAI,CAACb,IAAG,GAAIa,KAAK,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAC5B,MAAMC,QAAO,GAAI,IAAI,CAACf,IAAI,CAACV,IAAI;MACjC,IAAI,CAACW,mBAAkB,GAAIc,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;MACnDR,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACT,IAAI,CAACb,IAAI,CAAC;MAC7CqB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE,IAAI,CAACR,mBAAmB,CAAC;IACnD,CAAC;IACCgB,MAAMA,CAAA,EAAG;MACPT,OAAO,CAACC,GAAG,CAAC,OAAO;MACnBD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACS,QAAQ;IAC3B,CAAC;IACDC,MAAMA,CAAA,EAAG;MACb,IAAI,CAACnB,IAAG,GAAI,IAAI,EAAE;MAClB,IAAI,CAACoB,KAAK,CAACC,UAAU,CAACC,KAAK,CAAC,CAAC,EAAE;MAC/Bd,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B;EAEI,CAAC;EACDc,KAAK,EAAE;IACLlC,SAASA,CAACmC,MAAM,EAAE;MAChB,IAAIA,MAAM,EAAE;QACV,IAAI,CAACnB,eAAe,CAAC,CAAC;MACxB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}